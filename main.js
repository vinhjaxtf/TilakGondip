const { app, BrowserWindow, ipcMain, screen } = require("electron");
const isDev = require("electron-is-dev");
const path = require("path");
const fontList = require("font-list");

let mainWin;
let splash;

app.disableHardwareAcceleration();
app.on("ready", () => {
  const { width, height } = screen.getPrimaryDisplay().workAreaSize;
  mainWin = new BrowserWindow({
    titleBarStyle: "hidden",
    width: 1030,
    height: 660,
    webPreferences: {
      webSecurity: false,
      nodeIntegration: true,
      nativeWindowOpen: true,
      nodeIntegrationInSubFrames: true,
      allowRunningInsecureContent: true,
    },
    show: false,
    // transparent: true,
  });
  splash = new BrowserWindow({
    width: 530,
    height: 343,
    frame: false,
    transparent: true,
    alwaysOnTop: true,
  });
  splash.loadURL(
    isDev
      ? path.join(__dirname, "/public/assets/launch-page.html")
      : `file://${path.join(__dirname, "./build/assets/launch-page.html")}`
  );
  // if (!isDev) {
  //   const { Menu } = require("electron");
  //   Menu.setApplicationMenu(null);
  // }

  const urlLocation = isDev
    ? "http://localhost:3000"
    : `file://${path.join(__dirname, "./build/index.html")}`;
  mainWin.loadURL(urlLocation);
  mainWin.webContents.on("did-finish-load", () => {
    splash.destroy();
    // mainWin.maximize();
    // mainWin.webContents.setZoomFactor(1);
    mainWin.show();
  });
  mainWin.on("close", () => {
    mainWin = null;
  });
  mainWin.webContents.on(
    "new-window",
    (event, url, frameName, disposition, options, additionalFeatures) => {
      event.preventDefault();
      Object.assign(options, {
        parent: mainWin,
        width: width,
        height: height,
        frame: url.indexOf("epub") > -1 ? true : true,
      });
      event.newGuest = new BrowserWindow(options);
      event.newGuest.maximize();
    }
  );
  ipcMain.on("fonts-ready", (event, arg) => {
    fontList
      .getFonts()
      .then((fonts) => {
        event.returnValue = fonts;
      })
      .catch((err) => {
        console.log(err);
      });
  });
  let isFirst = true;
  ipcMain.on("start-server", (event, arg) => {
    if (isFirst) startExpress();
    isFirst = false;
    event.returnValue = "pong";
  });
});
app.on("window-all-closed", () => {
  app.quit();
});
function startExpress() {
  const express = require("express");
  const cors = require("cors");
  const bodyParser = require("body-parser");
  const fileUpload = require("express-fileupload");
  const path = require("path");
  const fs = require("fs");
  const Epub = require("epub-gen");
  const { readFileSync } = require("fs");
  const iconv = require("iconv-lite");
  const electron = require("electron");
  const nodepub = require("nodepub");
  const configDir = (electron.app || electron.remote.app).getPath("userData");
  var dirPath = path.join(configDir, "uploads\\");
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath);
    console.log("文件夹创建成功");
  } else {
    console.log("文件夹已存在");
  }
  const server = express();
  server.use(
    fileUpload({
      createParentPath: true,
    })
  );
  server.use(cors());
  server.use(bodyParser.json());
  server.use(bodyParser.urlencoded({ extended: true }));
  server.post("/ebook_parser", async (req, res) => {
    let file = req.files.file;
    file.mv(path.join(__dirname + file.name), () => {
      //       var generateContentsPage = function (links) {
      //         var contents = "<h1>目录</h1>";
      //         for (let i = 0; i < links.length; i++) {
      //           if (link.itemType === "main") {
      //             if (link.title === "More Books to Read") {
      //               contents += "<div> &nbsp;</div>";
      //             }
      //             contents +=
      //               "<div><a href='" + link.link + "'>" + link.title + "</a></div>";
      //           }
      //         }
      //         return contents;
      //       };
      let bookTitle = file.name.split(".")[0];
      var metadata = {
        id: new Date().getTime(),
        title: bookTitle,
        series: "My Series",
        sequence: 1,
        author: "Anonymous",
        fileAs: "Anonymous",
        genre: "Non-Fiction",
        tags: "Sample,Example,Test",
        copyright: "Anonymous, 1980",
        publisher: "My Fake Publisher",
        published: "2000-12-31",
        language: "en",
        description: "A Epub file generated by Koodo Reader",
        contents: "Table of Contents",
        source: "http://www.kcartlidge.com",
        images: "test.jpg",
      };

      // epub.writeEPUB(
      //   function (e) {
      //     console.log("Error:", e);
      //   },
      //   "uploads",
      //   bookTitle,
      //   function () {
      //     res.sendFile(dirPath + `${bookTitle}.epub`);
      //     res.on("finish", function () {
      //       try {
      //         fs.unlink(dirPath + `${bookTitle}.epub`, (err) => {
      //           if (err) throw err;
      //           console.log("successfully deleted");
      //         });
      //         fs.unlink(dirPath + `${file.name}`, (err) => {
      //           if (err) throw err;
      //           console.log("successfully deleted");
      //         });
      //       } catch (e) {
      //         console.log("error removing ");
      //       }
      //     });
      //   }
      // );
      /* eslint-disable no-console */
      var _ = require("lodash");

      // Dummy text (lorem ipsum).
      var lipsum =
        "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse mattis iaculis pharetra. Proin malesuada tortor ut nibh viverra eleifend.</p><p>Duis efficitur, arcu vitae viverra consectetur, nisi mi pharetra metus, vel egestas ex velit id leo. Curabitur non tortor nisi. Mauris ornare, tellus vel fermentum suscipit, ligula est eleifend dui, in elementum nunc risus in ipsum. Pellentesque finibus aliquet turpis sed scelerisque. Pellentesque gravida semper elit, ut consequat est mollis sit amet. Nulla facilisi.</p>";
      for (var i = 0; i < 3; i++) {
        lipsum = lipsum + lipsum;
      }

      // Optional override to replace auto-generated contents page.
      // If not required, just drop it from the 'var epub=' call below.
      // var generateContentsPage = function (links) {
      //   var contents = "<h1>Chapters</h1>";
      //   _.each(links, function (link) {
      //     // Omit all but the main pages.
      //     if (link.itemType === "main") {
      //       if (link.title === "More Books to Read") {
      //         contents += "<div> &nbsp;</div>";
      //       }
      //       contents +=
      //         "<div><a href='" + link.link + "'>" + link.title + "</a></div>";
      //     }
      //   });
      //   return contents;
      // };

      // Set up the EPUB basics.
      var epub = nodepub.document(metadata, "test.jpg");

      // Add some content.
      epub.addSection("Chapter 1", "<h1>One</h1>" + lipsum);

      const data = readFileSync(path.join(__dirname + file.name), {
        encoding: "binary",
      });
      const buf = new Buffer(data, "binary");
      const lines = iconv.decode(buf, "GBK").split("\n");
      const content = [];

      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        // console.log(line, line.startsWith("序章"), "test");

        if (
          line.startsWith("CHAPTER ") ||
          line.startsWith("Chapter") ||
          line.startsWith("第") ||
          line.startsWith("序章") ||
          line.startsWith("前言") ||
          line.startsWith("写在前面的话") ||
          line.startsWith("后记") ||
          line.startsWith("楔子") ||
          line.startsWith("后记") ||
          line.startsWith("后序")
        ) {
          content.push({
            title: line,
            data: `<h1>${line}</h1>`,
          });
        } else {
          if (!content[content.length - 1]) {
            content.push({
              title: "前言",
              data: `<h1>前言</h1>`,
            });
          }
          content[content.length - 1].data += `<p>${line.trim()}</p>`;
        }
      }
      // console.log(content);
      // for (let i = 0; i < content.length; i++) {
      //   epub.addSection(content.title, content.data);
      // }
      epub.writeEPUB(
        function (e) {
          console.log("Error:", e);
        },
        "uploads",
        bookTitle,
        function () {
          console.log("No errors. See the 'uploads' subfolder.");
          res.sendFile(path.join(__dirname + `/uploads/${bookTitle}.epub`));
        }
      );

      // Also write the structure both for debugging purposes and also to provide sample output in GitHub.
      // epub.writeFilesForEPUB("example/example-EPUB-files", (err) => {
      //   if (err) {
      //     console.log(err);
      //   }
      // });
    });
  });

  async function start() {
    try {
      const port = 3366;
      expressServer = await server.listen(port);
      console.log("started");
      const address = expressServer.address();
      serverInfo = {
        port: address.port,
        local: "localhost",
        url: `http://localhost:${address.port}`,
      };
      return serverInfo;
    } catch (e) {
      return { message: e.message };
    }
  }

  async function startServer() {
    console.log("starting");
    const { port, local, message } = await start();
    if (message) {
      console.log("err");
      console.error(message);
    } else {
      console.info(`启动成功，本地访问 http://${local}:${port}`);
    }
  }

  startServer();
}
